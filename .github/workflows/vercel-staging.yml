name: Vercel Staging Deployment

on:
  push:
    branches:
      - 'release-*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          else
            # For release branches, deploy with staging alias
            BRANCH_NAME="${{ github.ref_name }}"
            ALIAS="staging-${BRANCH_NAME//\//-}"
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            vercel alias set $DEPLOYMENT_URL $ALIAS --token=${{ secrets.VERCEL_TOKEN }}
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Vercel Preview Deployment')
            );
            
            const body = `### üöÄ Vercel Preview Deployment
            
            **Preview URL**: ${deploymentUrl}
            **Branch**: \`${{ github.head_ref }}\`
            **Commit**: \`${{ github.sha.substring(0, 7) }}\`
            
            ---
            
            #### üîç Preview Features
            - Adaptive Onboarding v3
            - Real-time Allowance Engine
            - Dynamic Tax Thresholds
            
            #### üß™ Test Credentials
            - Email: \`test@example.com\`
            - Password: \`TestUser123!\`
            
            <sub>Generated by GitHub Actions ü§ñ</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
      
      - name: Run Lighthouse CI
        if: github.event_name == 'pull_request'
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli@0.15.x
          lhci autorun --upload.target=temporary-public-storage --collect.url=${{ steps.deploy.outputs.deployment_url }} || echo "Lighthouse CI failed but continuing"